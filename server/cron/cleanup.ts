import cron from "node-cron";
import { PrismaClient } from "@prisma/client";
import fs from "fs";
import path from "path";

const prisma = new PrismaClient();

// ‡πÑ‡∏ß‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö cronjob
// cron.schedule("*/5 * * * * *", () => {
//   console.log("‚è≥ Cronjob ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
// });

cron.schedule("0 0 */7 * *", async () => {
  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

  try {
    const oldNotes = await prisma.note.findMany({
      where: {
        createdAt: {
          lt: sevenDaysAgo,
        },
      },
    });

    for (const note of oldNotes) {
      if (note.image) {
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô public
        const imagePath = path.join(process.cwd(), "public", note.image);
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
          console.log(`üßπ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${note.image}`);
        } else {
          console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${note.image}`);
        }
      }

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Note ‡∏à‡∏≤‡∏Å DB
      await prisma.note.delete({
        where: {
          id: note.id,
        },
      });
      console.log(`‚úÖ ‡∏•‡∏ö‡πÇ‡∏ô‡πâ‡∏ï id: ${note.id}`);
    }
  } catch (err) {
    console.error("‚ùå ‡∏•‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏Å‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  }
});
